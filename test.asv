clear
clc
clear all

% % x = sin(2)
% a=sin(5);
% b=cos(5)
% % N = input('Enter a value for N - ');
% % fprintf(' N =%g \n',500)
% % fprintf(' x =%1.12g \n',pi)
% % fprintf(' x =%1.10e \n',pi)
% % fprintf(' x =%6.2f \n',pi)
% % fprintf(' x =%12.8f y =%12.8f \n',5,exp(5))

%a)
% d = 10000;
% v = 750;
% g = 9.8;
% 
% x = (asin((d*g)/v^2))/2

v1 = 30000;
v2 = [-5000, 8000, 1000];
m1 = 6e24;
m2 = 1e19;

vf = ((m1.*v1) + (m2.*v2)./ (m1 + m2))

a=sin(5);
b=cos(5)

A = [1  2  3  4
     5  6  7  8
     9 10 11 12
     13 14 15 16]
 %% 3.1 Debugging
 
clear; % clear all variables from memory
close all; % close any figure windows
% N is the largest number to test
N=12;
% steps the value of n from 1 to N
for n=1:N
% calculate the integer remainder of this value of n divided by 3
r = mod(n,3);
if (r==0)
% indicate that 3 is a factor of this n
fprintf(' 3 is a factor of %g \n', n);
else
% indicate that if 3 is not a factor of this n
fprintf(' 3 is not a factor of %g \n', n);
end
end

%% 4.1 Loops and Logic

clear; close all;
% set s to zero so that 1/n^2 can be repeatedly added to it
s=0;
N=10000; % set the upper limit of the sum
for n=1:N % start of the loop
s = s + 1/n^2; % add 1/n^2 to s each iteration
end % end of the loop
fprintf(' Sum = %g \n',s) % print the answer

%% 4.2 Loops

clear; close all;
P=1; % set the first term in the product
N=20; % set the upper limit of the product
for n=2:N % start the loop at n=2 because we already loaded n=1
P=P*n; % multiply by n each time, put the answer back into P
end % end of the loop
fprintf(' N! = %g \n',P) % print the answer

factorial(20)

%% 4.3 Loops in matrix

clear; close all;
a(1)=1; % put the first element into the array
N=19; % the first one is loaded, so let's load 19 more
for n=1:N % start the loop
a(n+1)=(2*n-1)/(2*n+1)*a(n); % the recursion relation
end
disp(a) % display the resulting array of values

%% 
